#+title: Config
#+property: header-args :tangle config.el


*WARNING*:
Don't forget to press *C-c C-c* to refresh the content of the org file.
And do that by putting the cursor in the header part of this file,
So in the title or property section part of the header !!

* TABLE OF CONTENTS :toc:
- [[#the-config-file-of-my-doom-emacs-config][The Config file of my Doom Emacs config]]
  - [[#identification][Identification]]
  - [[#theming-and-fonts-config][Theming and Fonts config]]
  - [[#org-mode-and-org-roam-config][Org mode and Org-Roam config]]
  - [[#programming-languages-config][Programming Languages Config]]
  - [[#rainbow-syntax-highlighting-config][Rainbow Syntax highlighting Config]]
  - [[#org-roam-ui-setup][Org Roam Ui Setup]]

* The Config file of my Doom Emacs config
*$DOOMDIR/config.el -*- lexical-binding: t; -*-

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

** Identification
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src elisp
(setq user-full-name "Miloudi Adel Hani"
      user-mail-address "adelhani.miloudi@gmail.com")
#+end_src
** Theming and Fonts config
 Doom exposes five (optional) variables for controlling fonts in Doom:

 - `doom-font' -- the primary font to use
 - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
 - `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.
 - `doom-unicode-font' -- for unicode glyphs
 - `doom-serif-font' -- for the `fixed-pitch-serif' face

 See 'C-h v doom-font' for documentation and more examples of what they
 accept. For example:


#+begin_src elisp
(setq doom-font (font-spec :family "Fira Code" :size 14 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 15))
#+end_src

 If you or Emacs can't find your font, use 'M-x describe-font' to look them
 up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
 refresh your font settings. If Emacs still can't find your font, it likely
 wasn't installed correctly. Font issues are rarely Doom issues!

 There are two ways to load a theme. Both assume the theme is installed and
 available. You can either set `doom-theme' or manually load a theme with the
 `load-theme' function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-one)
(doom/set-frame-opacity 95)
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

** Org mode and Org-Roam config
 If you use `org' and don't want your org files in the default location below,
 change `org-directory'. It must be set before org loads!
 (setq org-directory "~/org/")

#+begin_src elisp
(setq org-directory "~/Dropbox/Personal/org/")
(setq org-roam-directory "~/Dropbox/Personal/org-roam/")
(setq +org-roam-open-buffer-on-find-file t)
#+end_src
 Whenever you reconfigure a package, make sure to wrap your config in an
 `after!' block, otherwise Doom's defaults may override your settings. E.g.

   (after! PACKAGE
     (setq x y))

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use *`C-h o'* to look up a symbol (functions, variables, faces,
 etc).

 You can also try *'gd' (or 'C-c c d')* to jump to their definition and see how
 they are implemented.

** Programming Languages Config


#+begin_src elisp
(set-eglot-client! 'cc-mode '("ccls" "--init={\"index\": {\"threads\": 2}}"))
#+end_src
** Rainbow Syntax highlighting Config
 rainbow mode syntax highlighting

 Enable Rainbow Mode
#+begin_src elisp
;; (after! rainbow-mode
(add-hook 'prog-mode-hook 'rainbow-mode)
;; Enable Rainbow Delimiters
;; (after! rainbow-delimiters
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

;; (after! color-identifiers-mode
;;   (add-hook 'prog-mode-hook 'global-color-identifiers-mode))

;; (after! rainbow-identifiers
(add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
#+end_src

** Org Roam Ui Setup
org-roam-ui setup

#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
